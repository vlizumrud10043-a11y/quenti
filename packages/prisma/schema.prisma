// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  imports       = "./zod-schemas"
  relationModel = "default"
}

datasource db {
  provider     = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserType {
  Student
  Teacher
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  username            String?   @unique
  email               String    @unique
  emailVerified       DateTime?
  image               String?
  type                UserType  @default(Student)
  verified            Boolean   @default(false)
  createdAt           DateTime  @default(now())
  lastSeenAt          DateTime  @default(now())
  bannedAt            DateTime?
  displayName         Boolean   @default(true)
  flags               Int       @default(0)
  /// @zod.custom(imports.userMetadataSchema)
  metadata            Json?
  completedOnboarding Boolean   @default(false)
  isOrgEligible       Boolean   @default(false)
  organizationId      String?

  accounts       Account[]
  sessions       Session[]
  studySets      StudySet[]
  folders        Folder[]
  containers     Container[]
  starredTerms   StarredTerm[]
  studiableTerms StudiableTerm[]
  organization   Organization?               @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  orgMembership  OrganizationMembership?
  orgInvites     PendingOrganizationInvite[]
  highscores     Highscore[]
  classes        ClassMembership[]
  classInvites   PendingClassInvite[]
  classBans      ClassBan[]

  collabTerms     Term[]
  collabStudySets StudySetCollaborator[]

  @@index([organizationId])
  @@index([type])
}

model VerificationToken {
  identifier     String
  token          String        @unique
  expires        DateTime
  expiresInDays  Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@index([token])
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  logoUrl   String?
  logoHash  String?
  published Boolean   @default(false)
  deletedAt DateTime?
  /// @zod.custom(imports.orgMetadataSchema)
  metadata  Json?

  domains        OrganizationDomain[]
  members        OrganizationMembership[]
  users          User[]
  inviteToken    VerificationToken?
  pendingInvites PendingOrganizationInvite[]
  classes        Class[]
}

enum OrganizationDomainType {
  Base
  Student
}

model OrganizationDomain {
  id              String                 @id @default(cuid())
  orgId           String
  type            OrganizationDomainType
  requestedDomain String
  domain          String?                @unique
  verifiedEmail   String
  otpHash         String?
  verifiedAt      DateTime?
  filter          String?

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, type])
  @@unique([orgId, requestedDomain])
  @@index([orgId])
}

enum MembershipRole {
  Member
  Admin
  Owner
}

model OrganizationMembership {
  id       String         @id @default(cuid())
  orgId    String
  userId   String         @unique
  role     MembershipRole
  /// @zod.custom(imports.orgMembershipMetadata)
  metadata Json?

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

model PendingOrganizationInvite {
  id     String         @id @default(cuid())
  orgId  String
  userId String?
  email  String
  role   MembershipRole

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([orgId, email])
  @@unique([orgId, userId])
  @@index([email])
  @@index([orgId])
  @@index([userId])
}

model Class {
  id             String   @id @default(cuid())
  name           String
  description    String
  orgId          String?
  logoUrl        String?
  logoHash       String?
  // TODO: remove default once schema changes are merged
  bannerColor    String   @default("#ffa54c")
  bannerUrl      String?
  bannerHash     String?
  cortexCategory String?
  cortexCourse   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  organization Organization?        @relation(fields: [orgId], references: [id], onDelete: SetNull)
  members      ClassMembership[]
  invites      PendingClassInvite[]
  joinCodes    ClassJoinCode[]
  sections     Section[]
  studySets    StudySetsOnClasses[]
  folders      FoldersOnClasses[]
  assignments  Assignment[]
  bans         ClassBan[]

  accessableStudySets AllowedClassesOnStudySets[]

  @@index([orgId])
}

model Section {
  id        String   @id @default(cuid())
  classId   String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  class       Class             @relation(fields: [classId], references: [id], onDelete: Cascade)
  students    ClassMembership[]
  assignments Assignment[]
  joinCode    ClassJoinCode?

  accessableStudySets AllowedSectionsOnStudySets[]

  @@unique([classId, name])
  @@index([classId])
}

model ClassJoinCode {
  id        String   @id @default(cuid())
  classId   String
  sectionId String   @unique
  code      String   @unique
  createdAt DateTime @default(now())

  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([classId])
}

enum ClassMembershipType {
  Student
  Teacher
}

model ClassMembership {
  id        String              @id @default(cuid())
  classId   String
  userId    String
  email     String
  type      ClassMembershipType
  viewedAt  DateTime?
  sectionId String?
  deletedAt DateTime?

  class       Class             @relation(fields: [classId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  section     Section?          @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  preferences ClassPreferences?
  submissions Submission[]

  topicAssignments StudySetCollabTopicAssignee[]

  @@unique([classId, userId])
  @@unique([email, classId])
  @@index([classId])
  @@index([userId])
  @@index([sectionId])
}

model ClassBan {
  id      String  @id @default(cuid())
  classId String
  userId  String?
  // Preserve the email in case the user deletes their account to evade the ban
  email   String

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([classId, userId])
  @@unique([email, classId])
  @@index([classId])
  @@index([userId])
}

model PendingClassInvite {
  id        String              @id @default(cuid())
  classId   String
  userId    String?
  email     String
  type      ClassMembershipType
  sectionId String?

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([classId, email])
  @@index([classId])
  @@index([userId])
  @@index([email])
}

model ClassPreferences {
  id           String @id @default(cuid())
  membershipId String @unique

  bannerColor String?

  membership ClassMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([membershipId])
}

enum AssignmentType {
  Collab
}

model Assignment {
  id          String         @id @default(cuid())
  classId     String
  sectionId   String
  type        AssignmentType
  title       String         @db.VarChar(255)
  description Json?
  templateId  String?
  studySetId  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  availableAt DateTime
  dueAt       DateTime?
  lockedAt    DateTime?
  published   Boolean        @default(false)

  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  section     Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  submissions Submission[]
  studySet    StudySet?

  @@unique([id, classId])
  @@index([classId])
  @@index([sectionId])
  @@index([studySetId])
}

model Submission {
  id           String    @id @default(cuid())
  memberId     String
  assignmentId String
  startedAt    DateTime  @default(now())
  savedAt      DateTime  @default(now())
  submittedAt  DateTime?

  member     ClassMembership @relation(fields: [memberId], references: [id], onDelete: Cascade)
  assignment Assignment      @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  terms      Term[]

  @@index([memberId])
  @@index([assignmentId])
}

model WhitelistedEmail {
  email     String   @id @unique
  createdAt DateTime @default(now())
}

model StudySet {
  id                 String             @id @default(cuid())
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignmentId       String?            @unique
  assignment         Assignment?        @relation(fields: [assignmentId], references: [id], onDelete: SetNull)
  created            Boolean            @default(true)
  createdAt          DateTime           @default(now())
  savedAt            DateTime           @default(now()) @updatedAt
  type               StudySetType       @default(Default)
  title              String             @db.VarChar(255)
  description        String             @db.VarChar(2000)
  tags               Json               @default("[]")
  visibility         StudySetVisibility @default(Public)
  wordLanguage       String             @default("en")
  definitionLanguage String             @default("en")
  cortexStale        Boolean            @default(true)

  collab       StudySetCollab?
  terms        Term[]
  containers   Container[]
  folders      StudySetsOnFolders[]
  leaderboards Leaderboard[]

  classesWithAccess  AllowedClassesOnStudySets[]
  sectionsWithAccess AllowedSectionsOnStudySets[]
  setPinnedInClasses StudySetsOnClasses[]
  collaborators      StudySetCollaborator[]

  @@unique([id, userId])
  @@index([userId])
}

model StudySetCollaborator {
  id         String   @id @default(cuid())
  studySetId String
  userId     String
  createdAt  DateTime @default(now())

  studySet StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([studySetId, userId])
  @@index([studySetId])
  @@index([userId])
}

model StudySetCollab {
  id              String             @id @default(cuid())
  studySetId      String             @unique
  type            StudySetCollabType
  minTermsPerUser Int?
  maxTermsPerUser Int?

  studySet StudySet              @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  topics   StudySetCollabTopic[]
}

enum StudySetCollabType {
  Default
  Topic
}

model StudySetCollabTopic {
  id          String  @id @default(cuid())
  collabId    String
  topic       String  @db.VarChar(255)
  description String? @db.VarChar(2000)
  rank        Int

  minTerms Int
  maxTerms Int

  collab   StudySetCollab                @relation(fields: [collabId], references: [id], onDelete: Cascade)
  assigned StudySetCollabTopicAssignee[]
  terms    Term[]

  @@index([collabId])
}

model StudySetCollabTopicAssignee {
  id       String @id @default(cuid())
  topicId  String
  memberId String
  minTerms Int
  maxTerms Int

  topic  StudySetCollabTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  member ClassMembership     @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([topicId, memberId])
  @@index([memberId])
}

enum StudySetType {
  Default
  Collab
}

enum StudySetVisibility {
  Private
  Unlisted
  Public
  Class
}

model AllowedClassesOnStudySets {
  studySetId String
  classId    String
  studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([studySetId, classId])
  @@index([studySetId])
  @@index([classId])
}

model AllowedSectionsOnStudySets {
  studySetId String
  sectionId  String
  studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  section    Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@id([studySetId, sectionId])
  @@index([studySetId])
  @@index([sectionId])
}

model Folder {
  id           String               @id @default(cuid())
  createdAt    DateTime             @default(now())
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String               @db.VarChar(255)
  slug         String?
  description  String               @db.VarChar(2000)
  studySets    StudySetsOnFolders[]
  containers   Container[]
  leaderboards Leaderboard[]

  folderPinnedInClasses FoldersOnClasses[]

  @@unique([id, userId])
  @@unique([userId, slug])
}

model StudySetsOnFolders {
  studySetId String
  folderId   String
  studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  folder     Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@id([studySetId, folderId])
  @@index([studySetId])
  @@index([folderId])
}

model StudySetsOnClasses {
  studySetId String
  classId    String
  studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([studySetId, classId])
  @@index([studySetId])
  @@index([classId])
}

model FoldersOnClasses {
  folderId String
  classId  String
  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  class    Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([folderId, classId])
  @@index([folderId])
  @@index([classId])
}

model Term {
  id                 String  @id @default(cuid())
  word               String  @db.VarChar(1000)
  definition         String  @db.VarChar(1000)
  wordRichText       Json?
  definitionRichText Json?
  assetUrl           String? @db.VarChar(255)
  rank               Int
  studySetId         String
  ephemeral          Boolean @default(false)
  authorId           String?
  topicId            String?
  submissionId       String?

  studySet   StudySet             @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  user       User?                @relation(fields: [authorId], references: [id], onDelete: SetNull)
  topic      StudySetCollabTopic? @relation(fields: [topicId], references: [id], onDelete: SetNull)
  submission Submission?          @relation(fields: [submissionId], references: [id], onDelete: SetNull)

  starredTerms   StarredTerm[]
  studiableTerms StudiableTerm[]
  distractors    Distractor[]    @relation("distractor-term-id")

  @@unique([id, studySetId])
  @@unique([id, submissionId])
  @@index([studySetId])
  @@index([authorId])
  @@index([topicId])
  @@index([submissionId])
}

enum DistractorType {
  Word
  Definition
}

model Distractor {
  termId        String         @db.Char(25)
  distractingId String         @db.Char(25)
  type          DistractorType

  term Term @relation(name: "distractor-term-id", fields: [termId], references: [id], onDelete: Cascade)

  @@unique([termId, distractingId, type])
  @@index([termId])
}

model Leaderboard {
  id       String          @id @default(cuid())
  entityId String
  type     LeaderboardType

  studySet   StudySet?   @relation(fields: [entityId], references: [id], map: "leaderboard_study_set", onDelete: Cascade)
  folder     Folder?     @relation(fields: [entityId], references: [id], map: "leaderboard_folder", onDelete: Cascade)
  highscores Highscore[]

  @@unique([entityId, type])
  @@index([entityId])
}

model Highscore {
  leaderboardId String
  userId        String
  time          Int
  timestamp     DateTime @updatedAt
  eligible      Boolean  @default(true)

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaderboard Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)

  @@id([leaderboardId, userId, eligible])
  @@index([userId])
  @@index([leaderboardId])
}

model EntityShare {
  id       String     @id
  entityId String     @unique
  type     EntityType
}

enum EntityType {
  StudySet
  Folder
}

enum StudiableMode {
  Flashcards
  Learn
}

enum LearnMode {
  Learn
  Review
}

enum LeaderboardType {
  Match
}

enum StudySetAnswerMode {
  Word
  Definition
  Both
}

enum LimitedStudySetAnswerMode {
  Word
  Definition
}

enum MultipleAnswerMode {
  One
  All
  Unknown
}

enum ContainerType {
  StudySet
  Folder
}

model Container {
  id                   String                    @id @default(cuid())
  entityId             String
  type                 ContainerType
  userId               String
  viewedAt             DateTime
  user                 User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shuffleFlashcards    Boolean                   @default(false)
  learnRound           Int                       @default(0)
  learnMode            LearnMode                 @default(Learn)
  shuffleLearn         Boolean                   @default(false)
  studyStarred         Boolean                   @default(false)
  answerWith           StudySetAnswerMode        @default(Word)
  multipleAnswerMode   MultipleAnswerMode        @default(Unknown)
  extendedFeedbackBank Boolean                   @default(false)
  enableCardsSorting   Boolean                   @default(false)
  cardsRound           Int                       @default(0)
  cardsStudyStarred    Boolean                   @default(false)
  cardsAnswerWith      LimitedStudySetAnswerMode @default(Definition)
  matchStudyStarred    Boolean                   @default(false)

  starredTerms   StarredTerm[]
  studiableTerms StudiableTerm[]
  studySet       StudySet?       @relation(fields: [entityId], references: [id], map: "container_study_set", onDelete: Cascade)
  folder         Folder?         @relation(fields: [entityId], references: [id], map: "container_folder", onDelete: Cascade)

  @@unique([userId, entityId, type])
  @@index([entityId])
}

model StudiableTerm {
  userId          String
  termId          String
  containerId     String
  mode            StudiableMode @default(Learn)
  correctness     Int
  appearedInRound Int?
  incorrectCount  Int           @default(0)
  studiableRank   Int?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  term      Term      @relation(fields: [termId], references: [id], onDelete: Cascade)
  container Container @relation(fields: [containerId], references: [id], onDelete: Cascade)

  // Full composite primary key will always be used for lookups
  @@id([userId, containerId, termId, mode])
  @@index([containerId])
}

model StarredTerm {
  userId      String
  termId      String
  containerId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  term      Term      @relation(fields: [termId], references: [id], onDelete: Cascade)
  container Container @relation(fields: [containerId], references: [id], onDelete: Cascade)

  @@id([userId, termId])
  @@index([containerId])
}
